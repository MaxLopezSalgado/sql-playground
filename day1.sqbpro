<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/maximilianolopezsalgado/data_projects/sql-playground/databases/day1.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1251"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,13:mainManufacturers"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Manufacturers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="25"/><column index="2" value="143"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="31"/><column index="2" value="133"/><column index="3" value="47"/><column index="4" value="115"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="126"/><column index="2" value="37"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">INSERT INTO Manufacturers(id, name) VALUES(1, 'Sony');
INSERT INTO Manufacturers(id, name) VALUES(2, 'Creative Labs');
INSERT INTO Manufacturers(id, name) VALUES(3, 'Hewlett-Packard');
INSERT INTO Manufacturers(id, name) VALUES(4, 'Iomega');
INSERT INTO Manufacturers(id, name) VALUES(5, 'Fujitsu');
INSERT INTO Manufacturers(id, name) VALUES(6, 'Winchester');

INSERT INTO Products(id, name, price, manufacturer) VALUES(1, 'Hard drive', 240, 5);
INSERT INTO Products(id, name, price, manufacturer) VALUES(2, 'Memory', 120, 6);
INSERT INTO Products(id, name, price, manufacturer) VALUES(3, 'ZIP drive', 150, 4);
INSERT INTO Products(id, name, price, manufacturer) VALUES(4, 'Floppy disk', 5, 6);
INSERT INTO Products(id, name, price, manufacturer) VALUES(5, 'Monitor', 240, 1);
INSERT INTO Products(id, name, price, manufacturer) VALUES(6, 'DVD drive', 180, 2);
INSERT INTO Products(id, name, price, manufacturer) VALUES(7, 'CD drive', 90, 2);
INSERT INTO Products(id, name, price, manufacturer) VALUES(8, 'Printer', 270, 3);
INSERT INTO Products(id, name, price, manufacturer) VALUES(9, 'Toner cartridge', 66, 3);
INSERT INTO Products(id, name, price, manufacturer) VALUES(10, 'DVD burner', 180, 2);

-- The questions for Day 1 are as follows:

-- 1.1 Select the names of all the products in the store.
SELECT *  
FROM Manufacturers;

-- 1.2 Select the names and the prices of all the products in the store.
SELECT name, price 
FROM Products;

-- 1.3 Select the name of the products with a price less than or equal to $200.
SELECT name
FROM Products
WHERE price &lt;= 200;

-- 1.4 Select all the products with a price between $60 and $120.
SELECT name
FROM Products
WHERE price &gt;= 60 AND price &lt;= 120;

-- 1.5 Select the name and price in cents (i.e., the price must be multiplied by 100).
SELECT name, price * 100 AS price_in_cents
FROM Products

-- 1.6 Compute the average price of all the products.
SELECT AVG(price) as average_price 
FROM Products

-- 1.7 Compute the average price of all products with manufacturer code equal to 2.
SELECT AVG(price) as average_price 
FROM Products
WHERE manufacturer = 2;

-- 1.8 Compute the number of products with a price larger than or equal to $180.
SELECT COUNT(*) AS product_count
FROM Products
WHERE Price &gt;= 180;

-- 1.9 Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name (in ascending order).
SELECT name, price
FROM Products
WHERE price &gt;= 180
ORDER BY price DESC;

-- 1.10 Select all the data from the products, including all the data for each product's manufacturer.
SELECT *
FROM Products, Manufacturers

-- 1.11 Select the product name, price, and manufacturer name of all the products.
SELECT name, price, manufacturer
FROM Products

-- 1.12 Select the average price of each manufacturer's products, showing only the manufacturer's code.
SELECT m.id, AVG(p.price) AS average_price
FROM Products p
JOIN Manufacturers m ON p.manufacturer = m.id
GROUP BY m.id;

-- 1.13 Select the average price of each manufacturer's products, showing the manufacturer's name.
SELECT m.name, AVG(p.price) as average_price
FROM Products p
JOIN Manufacturers m ON p.manufacturer = m.id
GROUP BY m.name;

-- 1.14 Select the names of manufacturer whose products have an average price larger than or equal to $150.
SELECT m.name
FROM Manufacturers m
JOIN Products p ON m.id = p.manufacturer 
GROUP BY m.name
HAVING AVG(price) &gt;= 150;

-- 1.15 Select the name and price of the cheapest product.
SELECT p.name, p.price
FROM Products p
ORDER BY p.price ASC
LIMIT 1; 

-- 1.16 Select the name of each manufacturer along with the name and price of its most expensive product.
SELECT m.name, p.name, p.price
FROM Manufacturers m
JOIN Products p ON m.id = p.manufacturer
WHERE p.price = (SELECT MAX(price) FROM Products WHERE manufacturer = m.id);

-- 1.17 Add a new product: Loudspeakers, $70, manufacturer 2.
INSERT INTO Products(id, name, price, manufacturer)
VALUES  (11, 'Loudspeakers', 70, 2);

-- 1.18 Update the name of product 8 to &quot;Laser Printer&quot;.
UPDATE Products
SET name = 'Laser Printer'
WHERE id = 8;

-- 1.19 Apply a 10% discount to all products.
SELECT name, price, price * 0.9 as discount_applied
FROM Products;

-- 1.20 Apply a 10% discount to all products with a price larger than or equal to $120.;
SELECT name, price, price * 0.9 as discount_applied
FROM Products
WHERE price &gt;= 120;</sql><current_tab id="0"/></tab_sql></sqlb_project>
